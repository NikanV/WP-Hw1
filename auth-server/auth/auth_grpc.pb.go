// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: auth/auth.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RepPq_Authenticate_FullMethodName = "/rep_pq/Authenticate"
)

// RepPqClient is the client API for RepPq service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepPqClient interface {
	Authenticate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type repPqClient struct {
	cc grpc.ClientConnInterface
}

func NewRepPqClient(cc grpc.ClientConnInterface) RepPqClient {
	return &repPqClient{cc}
}

func (c *repPqClient) Authenticate(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, RepPq_Authenticate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepPqServer is the server API for RepPq service.
// All implementations must embed UnimplementedRepPqServer
// for forward compatibility
type RepPqServer interface {
	Authenticate(context.Context, *Request) (*Reply, error)
	mustEmbedUnimplementedRepPqServer()
}

// UnimplementedRepPqServer must be embedded to have forward compatible implementations.
type UnimplementedRepPqServer struct {
}

func (UnimplementedRepPqServer) Authenticate(context.Context, *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedRepPqServer) mustEmbedUnimplementedRepPqServer() {}

// UnsafeRepPqServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepPqServer will
// result in compilation errors.
type UnsafeRepPqServer interface {
	mustEmbedUnimplementedRepPqServer()
}

func RegisterRepPqServer(s grpc.ServiceRegistrar, srv RepPqServer) {
	s.RegisterService(&RepPq_ServiceDesc, srv)
}

func _RepPq_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepPqServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RepPq_Authenticate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepPqServer).Authenticate(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RepPq_ServiceDesc is the grpc.ServiceDesc for RepPq service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepPq_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rep_pq",
	HandlerType: (*RepPqServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Authenticate",
			Handler:    _RepPq_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth/auth.proto",
}
