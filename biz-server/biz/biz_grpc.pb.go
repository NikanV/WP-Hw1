// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: biz.proto

package structpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Get_UsersClient is the client API for Get_Users service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Get_UsersClient interface {
	GetUsers(ctx context.Context, in *Get_Users_Req, opts ...grpc.CallOption) (*Get_Users_Resp, error)
	Get_User_Sql_Inj(ctx context.Context, in *Get_User_Sql_Inj_Req, opts ...grpc.CallOption) (*Get_Users_Resp, error)
}

type get_UsersClient struct {
	cc grpc.ClientConnInterface
}

func NewGet_UsersClient(cc grpc.ClientConnInterface) Get_UsersClient {
	return &get_UsersClient{cc}
}

func (c *get_UsersClient) GetUsers(ctx context.Context, in *Get_Users_Req, opts ...grpc.CallOption) (*Get_Users_Resp, error) {
	out := new(Get_Users_Resp)
	err := c.cc.Invoke(ctx, "/google.protobuf.Get_Users/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *get_UsersClient) Get_User_Sql_Inj(ctx context.Context, in *Get_User_Sql_Inj_Req, opts ...grpc.CallOption) (*Get_Users_Resp, error) {
	out := new(Get_Users_Resp)
	err := c.cc.Invoke(ctx, "/google.protobuf.Get_Users/Get_User_Sql_Inj", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Get_UsersServer is the server API for Get_Users service.
// All implementations must embed UnimplementedGet_UsersServer
// for forward compatibility
type Get_UsersServer interface {
	GetUsers(context.Context, *Get_Users_Req) (*Get_Users_Resp, error)
	Get_User_Sql_Inj(context.Context, *Get_User_Sql_Inj_Req) (*Get_Users_Resp, error)
	mustEmbedUnimplementedGet_UsersServer()
}

// UnimplementedGet_UsersServer must be embedded to have forward compatible implementations.
type UnimplementedGet_UsersServer struct {
}

func (UnimplementedGet_UsersServer) GetUsers(context.Context, *Get_Users_Req) (*Get_Users_Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedGet_UsersServer) Get_User_Sql_Inj(context.Context, *Get_User_Sql_Inj_Req) (*Get_Users_Resp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get_User_Sql_Inj not implemented")
}
func (UnimplementedGet_UsersServer) mustEmbedUnimplementedGet_UsersServer() {}

// UnsafeGet_UsersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Get_UsersServer will
// result in compilation errors.
type UnsafeGet_UsersServer interface {
	mustEmbedUnimplementedGet_UsersServer()
}

func RegisterGet_UsersServer(s grpc.ServiceRegistrar, srv Get_UsersServer) {
	s.RegisterService(&Get_Users_ServiceDesc, srv)
}

func _Get_Users_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get_Users_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Get_UsersServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.Get_Users/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Get_UsersServer).GetUsers(ctx, req.(*Get_Users_Req))
	}
	return interceptor(ctx, in, info, handler)
}

func _Get_Users_Get_User_Sql_Inj_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Get_User_Sql_Inj_Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Get_UsersServer).Get_User_Sql_Inj(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/google.protobuf.Get_Users/Get_User_Sql_Inj",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Get_UsersServer).Get_User_Sql_Inj(ctx, req.(*Get_User_Sql_Inj_Req))
	}
	return interceptor(ctx, in, info, handler)
}

// Get_Users_ServiceDesc is the grpc.ServiceDesc for Get_Users service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Get_Users_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "google.protobuf.Get_Users",
	HandlerType: (*Get_UsersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _Get_Users_GetUsers_Handler,
		},
		{
			MethodName: "Get_User_Sql_Inj",
			Handler:    _Get_Users_Get_User_Sql_Inj_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "biz.proto",
}
